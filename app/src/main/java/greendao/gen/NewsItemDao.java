package greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import bean.NewsItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NEWS_ITEM".
*/
public class NewsItemDao extends AbstractDao<NewsItem, String> {

    public static final String TABLENAME = "NEWS_ITEM";

    /**
     * Properties of entity NewsItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Title = new Property(0, String.class, "title", false, "TITLE");
        public final static Property Date = new Property(1, String.class, "date", false, "DATE");
        public final static Property AuthorName = new Property(2, String.class, "authorName", false, "AUTHOR_NAME");
        public final static Property ThumbnailPics = new Property(3, String.class, "thumbnailPics", false, "THUMBNAIL_PICS");
        public final static Property ThumbnailPics02 = new Property(4, String.class, "thumbnailPics02", false, "THUMBNAIL_PICS02");
        public final static Property ThumbnailPics03 = new Property(5, String.class, "thumbnailPics03", false, "THUMBNAIL_PICS03");
        public final static Property Url = new Property(6, String.class, "url", false, "URL");
        public final static Property Uniquekey = new Property(7, String.class, "uniquekey", true, "UNIQUEKEY");
        public final static Property Type = new Property(8, String.class, "type", false, "TYPE");
        public final static Property Realtype = new Property(9, String.class, "realtype", false, "REALTYPE");
        public final static Property ShowType = new Property(10, int.class, "showType", false, "SHOW_TYPE");
    }


    public NewsItemDao(DaoConfig config) {
        super(config);
    }
    
    public NewsItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NEWS_ITEM\" (" + //
                "\"TITLE\" TEXT," + // 0: title
                "\"DATE\" TEXT," + // 1: date
                "\"AUTHOR_NAME\" TEXT," + // 2: authorName
                "\"THUMBNAIL_PICS\" TEXT," + // 3: thumbnailPics
                "\"THUMBNAIL_PICS02\" TEXT," + // 4: thumbnailPics02
                "\"THUMBNAIL_PICS03\" TEXT," + // 5: thumbnailPics03
                "\"URL\" TEXT," + // 6: url
                "\"UNIQUEKEY\" TEXT PRIMARY KEY NOT NULL ," + // 7: uniquekey
                "\"TYPE\" TEXT," + // 8: type
                "\"REALTYPE\" TEXT," + // 9: realtype
                "\"SHOW_TYPE\" INTEGER NOT NULL );"); // 10: showType
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NEWS_ITEM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NewsItem entity) {
        stmt.clearBindings();
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(1, title);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(2, date);
        }
 
        String authorName = entity.getAuthorName();
        if (authorName != null) {
            stmt.bindString(3, authorName);
        }
 
        String thumbnailPics = entity.getThumbnailPics();
        if (thumbnailPics != null) {
            stmt.bindString(4, thumbnailPics);
        }
 
        String thumbnailPics02 = entity.getThumbnailPics02();
        if (thumbnailPics02 != null) {
            stmt.bindString(5, thumbnailPics02);
        }
 
        String thumbnailPics03 = entity.getThumbnailPics03();
        if (thumbnailPics03 != null) {
            stmt.bindString(6, thumbnailPics03);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(7, url);
        }
 
        String uniquekey = entity.getUniquekey();
        if (uniquekey != null) {
            stmt.bindString(8, uniquekey);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(9, type);
        }
 
        String realtype = entity.getRealtype();
        if (realtype != null) {
            stmt.bindString(10, realtype);
        }
        stmt.bindLong(11, entity.getShowType());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NewsItem entity) {
        stmt.clearBindings();
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(1, title);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(2, date);
        }
 
        String authorName = entity.getAuthorName();
        if (authorName != null) {
            stmt.bindString(3, authorName);
        }
 
        String thumbnailPics = entity.getThumbnailPics();
        if (thumbnailPics != null) {
            stmt.bindString(4, thumbnailPics);
        }
 
        String thumbnailPics02 = entity.getThumbnailPics02();
        if (thumbnailPics02 != null) {
            stmt.bindString(5, thumbnailPics02);
        }
 
        String thumbnailPics03 = entity.getThumbnailPics03();
        if (thumbnailPics03 != null) {
            stmt.bindString(6, thumbnailPics03);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(7, url);
        }
 
        String uniquekey = entity.getUniquekey();
        if (uniquekey != null) {
            stmt.bindString(8, uniquekey);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(9, type);
        }
 
        String realtype = entity.getRealtype();
        if (realtype != null) {
            stmt.bindString(10, realtype);
        }
        stmt.bindLong(11, entity.getShowType());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7);
    }    

    @Override
    public NewsItem readEntity(Cursor cursor, int offset) {
        NewsItem entity = new NewsItem( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // title
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // date
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // authorName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // thumbnailPics
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // thumbnailPics02
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // thumbnailPics03
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // url
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // uniquekey
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // type
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // realtype
            cursor.getInt(offset + 10) // showType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NewsItem entity, int offset) {
        entity.setTitle(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setDate(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAuthorName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setThumbnailPics(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setThumbnailPics02(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setThumbnailPics03(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUrl(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUniquekey(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setType(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setRealtype(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setShowType(cursor.getInt(offset + 10));
     }
    
    @Override
    protected final String updateKeyAfterInsert(NewsItem entity, long rowId) {
        return entity.getUniquekey();
    }
    
    @Override
    public String getKey(NewsItem entity) {
        if(entity != null) {
            return entity.getUniquekey();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(NewsItem entity) {
        return entity.getUniquekey() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
